#
#   goahead-windows-default.nmake -- Makefile to build Embedthis GoAhead for windows
#

NAME                  = goahead
VERSION               = 3.4.5

OS                    = windows
PA                    = $(PROCESSOR_ARCHITECTURE)
!IF "$(PROFILE)" == ""
PROFILE               = default
!ENDIF


!IF "$(PA)" == "AMD64"
ARCH                  = x64
ENTRY                 = _DllMainCRTStartup
!ELSE
ARCH                  = x86
ENTRY                 = _DllMainCRTStartup@12
!ENDIF

!IF "$(CONFIG)" == ""
CONFIG                = $(OS)-$(ARCH)-$(PROFILE)
!ENDIF

!IF "$(BUILD)" == ""
BUILD                 = build\$(CONFIG)
!ENDIF

LBIN                  = $(BUILD)\bin

!IF "$(ME_COM_COMPILER)" == ""
ME_COM_COMPILER       = 1
!ENDIF
!IF "$(ME_COM_EST)" == ""
ME_COM_EST            = 1
!ENDIF
!IF "$(ME_COM_LIB)" == ""
ME_COM_LIB            = 1
!ENDIF
!IF "$(ME_COM_LINK)" == ""
ME_COM_LINK           = 1
!ENDIF
!IF "$(ME_COM_MATRIXSSL)" == ""
ME_COM_MATRIXSSL      = 0
!ENDIF
!IF "$(ME_COM_NANOSSL)" == ""
ME_COM_NANOSSL        = 0
!ENDIF
!IF "$(ME_COM_OPENSSL)" == ""
ME_COM_OPENSSL        = 0
!ENDIF
!IF "$(ME_COM_OSDEP)" == ""
ME_COM_OSDEP          = 1
!ENDIF
!IF "$(ME_COM_RC)" == ""
ME_COM_RC             = 1
!ENDIF
!IF "$(ME_COM_SSL)" == ""
ME_COM_SSL            = 1
!ENDIF
!IF "$(ME_COM_VXWORKS)" == ""
ME_COM_VXWORKS        = 0
!ENDIF
!IF "$(ME_COM_WINSDK)" == ""
ME_COM_WINSDK         = 1
!ENDIF

!IF "$(ME_COM_OPENSSL)" == ""
ME_COM_OPENSSL_PATH   = ""
!ENDIF

!IF "$(ME_COM_SSL)" == ""
ME_COM_SSL            = 1
!ENDIF

!IF "$(ME_COM_COMPILER)" == ""
ME_COM_COMPILER       = 1
!ENDIF

!IF "$(ME_COM_COMPILER)" == ""
ME_COM_COMPILER       = 1
!ENDIF

!IF "$(ME_COM_SSL)" == ""
ME_COM_SSL            = 1
!ENDIF

!IF "$(ME_COM_WINSDK)" == ""
ME_COM_WINSDK         = 1
!ENDIF


CC                    = cl
LD                    = link
RC                    = rc
CFLAGS                = -nologo -GR- -W3 -Zi -Od -MDd
DFLAGS                = -D_REENTRANT -D_MT -DME_COM_COMPILER=$(ME_COM_COMPILER) -DME_COM_EST=$(ME_COM_EST) -DME_COM_LIB=$(ME_COM_LIB) -DME_COM_LINK=$(ME_COM_LINK) -DME_COM_MATRIXSSL=$(ME_COM_MATRIXSSL) -DME_COM_NANOSSL=$(ME_COM_NANOSSL) -DME_COM_OPENSSL=$(ME_COM_OPENSSL) -DME_COM_OSDEP=$(ME_COM_OSDEP) -DME_COM_RC=$(ME_COM_RC) -DME_COM_SSL=$(ME_COM_SSL) -DME_COM_VXWORKS=$(ME_COM_VXWORKS) -DME_COM_WINSDK=$(ME_COM_WINSDK) 
IFLAGS                = -Ibuild\$(CONFIG)\inc
LDFLAGS               = -nologo -nodefaultlib -incremental:no -debug -machine:$(ARCH)
LIBPATHS              = "-libpath:$(BUILD)\bin"
LIBS                  = ws2_32.lib advapi32.lib user32.lib kernel32.lib oldnames.lib msvcrt.lib shell32.lib

ME_ROOT_PREFIX        = C:
ME_BASE_PREFIX        = $(ME_ROOT_PREFIX)\Program Files
ME_APP_PREFIX         = $(ME_BASE_PREFIX)\Embedthis GoAhead
ME_VAPP_PREFIX        = $(ME_APP_PREFIX)
ME_DATA_PREFIX        = $(ME_VAPP_PREFIX)
ME_STATE_PREFIX       = $(ME_VAPP_PREFIX)
ME_BIN_PREFIX         = $(ME_VAPP_PREFIX)\bin
ME_INC_PREFIX         = $(ME_VAPP_PREFIX)\inc
ME_LIB_PREFIX         = $(ME_VAPP_PREFIX)\lib
ME_MAN_PREFIX         = $(ME_VAPP_PREFIX)\man
ME_ETC_PREFIX         = $(ME_VAPP_PREFIX)
ME_WEB_PREFIX         = $(ME_VAPP_PREFIX)\web
ME_LOG_PREFIX         = $(ME_VAPP_PREFIX)\log
ME_SPOOL_PREFIX       = $(ME_VAPP_PREFIX)\tmp
ME_CACHE_PREFIX       = $(ME_VAPP_PREFIX)\cache
ME_SRC_PREFIX         = $(ME_VAPP_PREFIX)\src


TARGETS               = $(TARGETS) build\$(CONFIG)\bin\goahead.exe
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\goahead-test.exe
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\gopass.exe
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\roots.crt

!IFNDEF SHOW
.SILENT:
!ENDIF

all build compile: prep $(TARGETS)

.PHONY: prep

prep:
!IF "$(VSINSTALLDIR)" == ""
	echo "Visual Studio vars not set. Run vcvars.bat."
	exit 255
!ENDIF
!IF "$(ME_APP_PREFIX)" == ""
	echo "ME_APP_PREFIX not set."
	exit 255
!ENDIF
	@if not exist $(BUILD)\bin md $(BUILD)\bin
	@if not exist $(BUILD)\inc md $(BUILD)\inc
	@if not exist $(BUILD)\obj md $(BUILD)\obj
	@if not exist $(BUILD)\inc\me.h copy projects\goahead-windows-default-me.h $(BUILD)\inc\me.h

!IF "$(SHOW)" != ""
	@echo ..... [Info] Use "make SHOW=1" to trace executed commands and errors.
LOG =
!ELSE
LOG = >nul
!ENDIF

clean:
	if exist "build\$(CONFIG)\obj\action.obj" del /Q "build\$(CONFIG)\obj\action.obj"
	if exist "build\$(CONFIG)\obj\alloc.obj" del /Q "build\$(CONFIG)\obj\alloc.obj"
	if exist "build\$(CONFIG)\obj\auth.obj" del /Q "build\$(CONFIG)\obj\auth.obj"
	if exist "build\$(CONFIG)\obj\cgi.obj" del /Q "build\$(CONFIG)\obj\cgi.obj"
	if exist "build\$(CONFIG)\obj\cgitest.obj" del /Q "build\$(CONFIG)\obj\cgitest.obj"
	if exist "build\$(CONFIG)\obj\crypt.obj" del /Q "build\$(CONFIG)\obj\crypt.obj"
	if exist "build\$(CONFIG)\obj\est.obj" del /Q "build\$(CONFIG)\obj\est.obj"
	if exist "build\$(CONFIG)\obj\estLib.obj" del /Q "build\$(CONFIG)\obj\estLib.obj"
	if exist "build\$(CONFIG)\obj\file.obj" del /Q "build\$(CONFIG)\obj\file.obj"
	if exist "build\$(CONFIG)\obj\fs.obj" del /Q "build\$(CONFIG)\obj\fs.obj"
	if exist "build\$(CONFIG)\obj\goahead.obj" del /Q "build\$(CONFIG)\obj\goahead.obj"
	if exist "build\$(CONFIG)\obj\gopass.obj" del /Q "build\$(CONFIG)\obj\gopass.obj"
	if exist "build\$(CONFIG)\obj\http.obj" del /Q "build\$(CONFIG)\obj\http.obj"
	if exist "build\$(CONFIG)\obj\js.obj" del /Q "build\$(CONFIG)\obj\js.obj"
	if exist "build\$(CONFIG)\obj\jst.obj" del /Q "build\$(CONFIG)\obj\jst.obj"
	if exist "build\$(CONFIG)\obj\options.obj" del /Q "build\$(CONFIG)\obj\options.obj"
	if exist "build\$(CONFIG)\obj\osdep.obj" del /Q "build\$(CONFIG)\obj\osdep.obj"
	if exist "build\$(CONFIG)\obj\rom-documents.obj" del /Q "build\$(CONFIG)\obj\rom-documents.obj"
	if exist "build\$(CONFIG)\obj\route.obj" del /Q "build\$(CONFIG)\obj\route.obj"
	if exist "build\$(CONFIG)\obj\runtime.obj" del /Q "build\$(CONFIG)\obj\runtime.obj"
	if exist "build\$(CONFIG)\obj\socket.obj" del /Q "build\$(CONFIG)\obj\socket.obj"
	if exist "build\$(CONFIG)\obj\test.obj" del /Q "build\$(CONFIG)\obj\test.obj"
	if exist "build\$(CONFIG)\obj\upload.obj" del /Q "build\$(CONFIG)\obj\upload.obj"
	if exist "build\$(CONFIG)\bin\goahead.exe" del /Q "build\$(CONFIG)\bin\goahead.exe"
	if exist "build\$(CONFIG)\bin\goahead.lib" del /Q "build\$(CONFIG)\bin\goahead.lib"
	if exist "build\$(CONFIG)\bin\goahead.pdb" del /Q "build\$(CONFIG)\bin\goahead.pdb"
	if exist "build\$(CONFIG)\bin\goahead.exp" del /Q "build\$(CONFIG)\bin\goahead.exp"
	if exist "build\$(CONFIG)\bin\goahead-test.exe" del /Q "build\$(CONFIG)\bin\goahead-test.exe"
	if exist "build\$(CONFIG)\bin\goahead-test.lib" del /Q "build\$(CONFIG)\bin\goahead-test.lib"
	if exist "build\$(CONFIG)\bin\goahead-test.pdb" del /Q "build\$(CONFIG)\bin\goahead-test.pdb"
	if exist "build\$(CONFIG)\bin\goahead-test.exp" del /Q "build\$(CONFIG)\bin\goahead-test.exp"
	if exist "build\$(CONFIG)\bin\gopass.exe" del /Q "build\$(CONFIG)\bin\gopass.exe"
	if exist "build\$(CONFIG)\bin\gopass.lib" del /Q "build\$(CONFIG)\bin\gopass.lib"
	if exist "build\$(CONFIG)\bin\gopass.pdb" del /Q "build\$(CONFIG)\bin\gopass.pdb"
	if exist "build\$(CONFIG)\bin\gopass.exp" del /Q "build\$(CONFIG)\bin\gopass.exp"
	if exist "build\$(CONFIG)\bin\libest.dll" del /Q "build\$(CONFIG)\bin\libest.dll"
	if exist "build\$(CONFIG)\bin\libest.lib" del /Q "build\$(CONFIG)\bin\libest.lib"
	if exist "build\$(CONFIG)\bin\libest.pdb" del /Q "build\$(CONFIG)\bin\libest.pdb"
	if exist "build\$(CONFIG)\bin\libest.exp" del /Q "build\$(CONFIG)\bin\libest.exp"
	if exist "build\$(CONFIG)\bin\libestssl.lib" del /Q "build\$(CONFIG)\bin\libestssl.lib"
	if exist "build\$(CONFIG)\bin\libgo.dll" del /Q "build\$(CONFIG)\bin\libgo.dll"
	if exist "build\$(CONFIG)\bin\libgo.lib" del /Q "build\$(CONFIG)\bin\libgo.lib"
	if exist "build\$(CONFIG)\bin\libgo.pdb" del /Q "build\$(CONFIG)\bin\libgo.pdb"
	if exist "build\$(CONFIG)\bin\libgo.exp" del /Q "build\$(CONFIG)\bin\libgo.exp"
	if exist "build\$(CONFIG)\bin\roots.crt" del /Q "build\$(CONFIG)\bin\roots.crt"

#
#   me.h
#

build\$(CONFIG)\inc\me.h: $(DEPS_1)

#
#   osdep.h
#
DEPS_2 = $(DEPS_2) src\osdep\osdep.h
DEPS_2 = $(DEPS_2) build\$(CONFIG)\inc\me.h

build\$(CONFIG)\inc\osdep.h: $(DEPS_2)
	@echo ..... [Copy] build\$(CONFIG)\inc\osdep.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\osdep\osdep.h+modified build\$(CONFIG)\inc\osdep.h $(LOG)

#
#   goahead.h
#
DEPS_3 = $(DEPS_3) src\goahead.h
DEPS_3 = $(DEPS_3) build\$(CONFIG)\inc\me.h
DEPS_3 = $(DEPS_3) build\$(CONFIG)\inc\osdep.h

build\$(CONFIG)\inc\goahead.h: $(DEPS_3)
	@echo ..... [Copy] build\$(CONFIG)\inc\goahead.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\goahead.h+modified build\$(CONFIG)\inc\goahead.h $(LOG)

#
#   js.h
#
DEPS_4 = $(DEPS_4) src\js.h
DEPS_4 = $(DEPS_4) build\$(CONFIG)\inc\goahead.h

build\$(CONFIG)\inc\js.h: $(DEPS_4)
	@echo ..... [Copy] build\$(CONFIG)\inc\js.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\js.h+modified build\$(CONFIG)\inc\js.h $(LOG)

#
#   cgitest.obj
#

build\$(CONFIG)\obj\cgitest.obj: \
    test\cgitest.c $(DEPS_5)
	@echo .. [Compile] build\$(CONFIG)\obj\cgitest.obj
	"$(CC)" -c -Fo$(BUILD)\obj\cgitest.obj -Fd$(BUILD)\obj\cgitest.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) test\cgitest.c $(LOG)

#
#   est.h
#
DEPS_6 = $(DEPS_6) src\est\est.h
DEPS_6 = $(DEPS_6) build\$(CONFIG)\inc\me.h
DEPS_6 = $(DEPS_6) build\$(CONFIG)\inc\osdep.h

build\$(CONFIG)\inc\est.h: $(DEPS_6)
	@echo ..... [Copy] build\$(CONFIG)\inc\est.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\est\est.h+modified build\$(CONFIG)\inc\est.h $(LOG)

#
#   est.h
#

src\est\est.h: $(DEPS_7)

#
#   estLib.obj
#
DEPS_8 = $(DEPS_8) src\est\est.h

build\$(CONFIG)\obj\estLib.obj: \
    src\est\estLib.c $(DEPS_8)
	@echo .. [Compile] build\$(CONFIG)\obj\estLib.obj
	"$(CC)" -c -Fo$(BUILD)\obj\estLib.obj -Fd$(BUILD)\obj\estLib.pdb -nologo -GR- -Zi -Od -MDd $(DFLAGS) $(IFLAGS) src\est\estLib.c $(LOG)

!IF "$(ME_COM_EST)" == "1"
#
#   libest
#
DEPS_9 = $(DEPS_9) build\$(CONFIG)\inc\osdep.h
DEPS_9 = $(DEPS_9) build\$(CONFIG)\inc\est.h
DEPS_9 = $(DEPS_9) build\$(CONFIG)\obj\estLib.obj

build\$(CONFIG)\bin\libest.dll: $(DEPS_9)
	@echo ..... [Link] build\$(CONFIG)\bin\libest.dll
	"$(LD)" -dll -out:$(BUILD)\bin\libest.dll -entry:$(ENTRY) $(LDFLAGS) $(LIBPATHS) "$(BUILD)\obj\estLib.obj" $(LIBS)  $(LOG)
!ENDIF

#
#   est.obj
#
DEPS_10 = $(DEPS_10) build\$(CONFIG)\inc\goahead.h
DEPS_10 = $(DEPS_10) build\$(CONFIG)\inc\est.h

build\$(CONFIG)\obj\est.obj: \
    src\goahead-est\est.c $(DEPS_10)
	@echo .. [Compile] build\$(CONFIG)\obj\est.obj
	"$(CC)" -c -Fo$(BUILD)\obj\est.obj -Fd$(BUILD)\obj\est.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\goahead-est\est.c $(LOG)

!IF "$(ME_COM_EST)" == "1"
#
#   libestssl
#
DEPS_11 = $(DEPS_11) build\$(CONFIG)\bin\libest.dll
DEPS_11 = $(DEPS_11) build\$(CONFIG)\obj\est.obj

build\$(CONFIG)\bin\libestssl.lib: $(DEPS_11)
	@echo ..... [Link] build\$(CONFIG)\bin\libestssl.lib
	"lib.exe" -nologo -out:$(BUILD)\bin\libestssl.lib "$(BUILD)\obj\est.obj" $(LOG)
!ENDIF

#
#   action.obj
#
DEPS_12 = $(DEPS_12) build\$(CONFIG)\inc\goahead.h

build\$(CONFIG)\obj\action.obj: \
    src\action.c $(DEPS_12)
	@echo .. [Compile] build\$(CONFIG)\obj\action.obj
	"$(CC)" -c -Fo$(BUILD)\obj\action.obj -Fd$(BUILD)\obj\action.pdb $(CFLAGS) $(DFLAGS) -DME_COM_OPENSSL_PATH="$(ME_COM_OPENSSL_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\include" src\action.c $(LOG)

#
#   alloc.obj
#
DEPS_13 = $(DEPS_13) build\$(CONFIG)\inc\goahead.h

build\$(CONFIG)\obj\alloc.obj: \
    src\alloc.c $(DEPS_13)
	@echo .. [Compile] build\$(CONFIG)\obj\alloc.obj
	"$(CC)" -c -Fo$(BUILD)\obj\alloc.obj -Fd$(BUILD)\obj\alloc.pdb $(CFLAGS) $(DFLAGS) -DME_COM_OPENSSL_PATH="$(ME_COM_OPENSSL_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\include" src\alloc.c $(LOG)

#
#   auth.obj
#
DEPS_14 = $(DEPS_14) build\$(CONFIG)\inc\goahead.h

build\$(CONFIG)\obj\auth.obj: \
    src\auth.c $(DEPS_14)
	@echo .. [Compile] build\$(CONFIG)\obj\auth.obj
	"$(CC)" -c -Fo$(BUILD)\obj\auth.obj -Fd$(BUILD)\obj\auth.pdb $(CFLAGS) $(DFLAGS) -DME_COM_OPENSSL_PATH="$(ME_COM_OPENSSL_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\include" src\auth.c $(LOG)

#
#   cgi.obj
#
DEPS_15 = $(DEPS_15) build\$(CONFIG)\inc\goahead.h

build\$(CONFIG)\obj\cgi.obj: \
    src\cgi.c $(DEPS_15)
	@echo .. [Compile] build\$(CONFIG)\obj\cgi.obj
	"$(CC)" -c -Fo$(BUILD)\obj\cgi.obj -Fd$(BUILD)\obj\cgi.pdb $(CFLAGS) $(DFLAGS) -DME_COM_OPENSSL_PATH="$(ME_COM_OPENSSL_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\include" src\cgi.c $(LOG)

#
#   crypt.obj
#
DEPS_16 = $(DEPS_16) build\$(CONFIG)\inc\goahead.h

build\$(CONFIG)\obj\crypt.obj: \
    src\crypt.c $(DEPS_16)
	@echo .. [Compile] build\$(CONFIG)\obj\crypt.obj
	"$(CC)" -c -Fo$(BUILD)\obj\crypt.obj -Fd$(BUILD)\obj\crypt.pdb $(CFLAGS) $(DFLAGS) -DME_COM_OPENSSL_PATH="$(ME_COM_OPENSSL_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\include" src\crypt.c $(LOG)

#
#   file.obj
#
DEPS_17 = $(DEPS_17) build\$(CONFIG)\inc\goahead.h

build\$(CONFIG)\obj\file.obj: \
    src\file.c $(DEPS_17)
	@echo .. [Compile] build\$(CONFIG)\obj\file.obj
	"$(CC)" -c -Fo$(BUILD)\obj\file.obj -Fd$(BUILD)\obj\file.pdb $(CFLAGS) $(DFLAGS) -DME_COM_OPENSSL_PATH="$(ME_COM_OPENSSL_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\include" src\file.c $(LOG)

#
#   fs.obj
#
DEPS_18 = $(DEPS_18) build\$(CONFIG)\inc\goahead.h

build\$(CONFIG)\obj\fs.obj: \
    src\fs.c $(DEPS_18)
	@echo .. [Compile] build\$(CONFIG)\obj\fs.obj
	"$(CC)" -c -Fo$(BUILD)\obj\fs.obj -Fd$(BUILD)\obj\fs.pdb $(CFLAGS) $(DFLAGS) -DME_COM_OPENSSL_PATH="$(ME_COM_OPENSSL_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\include" src\fs.c $(LOG)

#
#   http.obj
#
DEPS_19 = $(DEPS_19) build\$(CONFIG)\inc\goahead.h

build\$(CONFIG)\obj\http.obj: \
    src\http.c $(DEPS_19)
	@echo .. [Compile] build\$(CONFIG)\obj\http.obj
	"$(CC)" -c -Fo$(BUILD)\obj\http.obj -Fd$(BUILD)\obj\http.pdb $(CFLAGS) $(DFLAGS) -DME_COM_OPENSSL_PATH="$(ME_COM_OPENSSL_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\include" src\http.c $(LOG)

#
#   js.obj
#
DEPS_20 = $(DEPS_20) build\$(CONFIG)\inc\js.h

build\$(CONFIG)\obj\js.obj: \
    src\js.c $(DEPS_20)
	@echo .. [Compile] build\$(CONFIG)\obj\js.obj
	"$(CC)" -c -Fo$(BUILD)\obj\js.obj -Fd$(BUILD)\obj\js.pdb $(CFLAGS) $(DFLAGS) -DME_COM_OPENSSL_PATH="$(ME_COM_OPENSSL_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\include" src\js.c $(LOG)

#
#   jst.obj
#
DEPS_21 = $(DEPS_21) build\$(CONFIG)\inc\goahead.h
DEPS_21 = $(DEPS_21) build\$(CONFIG)\inc\js.h

build\$(CONFIG)\obj\jst.obj: \
    src\jst.c $(DEPS_21)
	@echo .. [Compile] build\$(CONFIG)\obj\jst.obj
	"$(CC)" -c -Fo$(BUILD)\obj\jst.obj -Fd$(BUILD)\obj\jst.pdb $(CFLAGS) $(DFLAGS) -DME_COM_OPENSSL_PATH="$(ME_COM_OPENSSL_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\include" src\jst.c $(LOG)

#
#   options.obj
#
DEPS_22 = $(DEPS_22) build\$(CONFIG)\inc\goahead.h

build\$(CONFIG)\obj\options.obj: \
    src\options.c $(DEPS_22)
	@echo .. [Compile] build\$(CONFIG)\obj\options.obj
	"$(CC)" -c -Fo$(BUILD)\obj\options.obj -Fd$(BUILD)\obj\options.pdb $(CFLAGS) $(DFLAGS) -DME_COM_OPENSSL_PATH="$(ME_COM_OPENSSL_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\include" src\options.c $(LOG)

#
#   osdep.obj
#
DEPS_23 = $(DEPS_23) build\$(CONFIG)\inc\goahead.h

build\$(CONFIG)\obj\osdep.obj: \
    src\osdep.c $(DEPS_23)
	@echo .. [Compile] build\$(CONFIG)\obj\osdep.obj
	"$(CC)" -c -Fo$(BUILD)\obj\osdep.obj -Fd$(BUILD)\obj\osdep.pdb $(CFLAGS) $(DFLAGS) -DME_COM_OPENSSL_PATH="$(ME_COM_OPENSSL_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\include" src\osdep.c $(LOG)

#
#   rom-documents.obj
#
DEPS_24 = $(DEPS_24) build\$(CONFIG)\inc\goahead.h

build\$(CONFIG)\obj\rom-documents.obj: \
    src\rom-documents.c $(DEPS_24)
	@echo .. [Compile] build\$(CONFIG)\obj\rom-documents.obj
	"$(CC)" -c -Fo$(BUILD)\obj\rom-documents.obj -Fd$(BUILD)\obj\rom-documents.pdb $(CFLAGS) $(DFLAGS) -DME_COM_OPENSSL_PATH="$(ME_COM_OPENSSL_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\include" src\rom-documents.c $(LOG)

#
#   route.obj
#
DEPS_25 = $(DEPS_25) build\$(CONFIG)\inc\goahead.h

build\$(CONFIG)\obj\route.obj: \
    src\route.c $(DEPS_25)
	@echo .. [Compile] build\$(CONFIG)\obj\route.obj
	"$(CC)" -c -Fo$(BUILD)\obj\route.obj -Fd$(BUILD)\obj\route.pdb $(CFLAGS) $(DFLAGS) -DME_COM_OPENSSL_PATH="$(ME_COM_OPENSSL_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\include" src\route.c $(LOG)

#
#   runtime.obj
#
DEPS_26 = $(DEPS_26) build\$(CONFIG)\inc\goahead.h

build\$(CONFIG)\obj\runtime.obj: \
    src\runtime.c $(DEPS_26)
	@echo .. [Compile] build\$(CONFIG)\obj\runtime.obj
	"$(CC)" -c -Fo$(BUILD)\obj\runtime.obj -Fd$(BUILD)\obj\runtime.pdb $(CFLAGS) $(DFLAGS) -DME_COM_OPENSSL_PATH="$(ME_COM_OPENSSL_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\include" src\runtime.c $(LOG)

#
#   socket.obj
#
DEPS_27 = $(DEPS_27) build\$(CONFIG)\inc\goahead.h

build\$(CONFIG)\obj\socket.obj: \
    src\socket.c $(DEPS_27)
	@echo .. [Compile] build\$(CONFIG)\obj\socket.obj
	"$(CC)" -c -Fo$(BUILD)\obj\socket.obj -Fd$(BUILD)\obj\socket.pdb $(CFLAGS) $(DFLAGS) -DME_COM_OPENSSL_PATH="$(ME_COM_OPENSSL_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\include" src\socket.c $(LOG)

#
#   upload.obj
#
DEPS_28 = $(DEPS_28) build\$(CONFIG)\inc\goahead.h

build\$(CONFIG)\obj\upload.obj: \
    src\upload.c $(DEPS_28)
	@echo .. [Compile] build\$(CONFIG)\obj\upload.obj
	"$(CC)" -c -Fo$(BUILD)\obj\upload.obj -Fd$(BUILD)\obj\upload.pdb $(CFLAGS) $(DFLAGS) -DME_COM_OPENSSL_PATH="$(ME_COM_OPENSSL_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\include" src\upload.c $(LOG)

#
#   libgo
#
DEPS_29 = $(DEPS_29) build\$(CONFIG)\inc\osdep.h
!IF "$(ME_COM_EST)" == "1"
DEPS_29 = $(DEPS_29) build\$(CONFIG)\bin\libestssl.lib
!ENDIF
DEPS_29 = $(DEPS_29) build\$(CONFIG)\inc\goahead.h
DEPS_29 = $(DEPS_29) build\$(CONFIG)\inc\js.h
DEPS_29 = $(DEPS_29) build\$(CONFIG)\obj\action.obj
DEPS_29 = $(DEPS_29) build\$(CONFIG)\obj\alloc.obj
DEPS_29 = $(DEPS_29) build\$(CONFIG)\obj\auth.obj
DEPS_29 = $(DEPS_29) build\$(CONFIG)\obj\cgi.obj
DEPS_29 = $(DEPS_29) build\$(CONFIG)\obj\crypt.obj
DEPS_29 = $(DEPS_29) build\$(CONFIG)\obj\file.obj
DEPS_29 = $(DEPS_29) build\$(CONFIG)\obj\fs.obj
DEPS_29 = $(DEPS_29) build\$(CONFIG)\obj\http.obj
DEPS_29 = $(DEPS_29) build\$(CONFIG)\obj\js.obj
DEPS_29 = $(DEPS_29) build\$(CONFIG)\obj\jst.obj
DEPS_29 = $(DEPS_29) build\$(CONFIG)\obj\options.obj
DEPS_29 = $(DEPS_29) build\$(CONFIG)\obj\osdep.obj
DEPS_29 = $(DEPS_29) build\$(CONFIG)\obj\rom-documents.obj
DEPS_29 = $(DEPS_29) build\$(CONFIG)\obj\route.obj
DEPS_29 = $(DEPS_29) build\$(CONFIG)\obj\runtime.obj
DEPS_29 = $(DEPS_29) build\$(CONFIG)\obj\socket.obj
DEPS_29 = $(DEPS_29) build\$(CONFIG)\obj\upload.obj

!IF "$(ME_COM_EST)" == "1"
LIBS_29 = $(LIBS_29) libestssl.lib
!ENDIF
!IF "$(ME_COM_EST)" == "1"
LIBS_29 = $(LIBS_29) libest.lib
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_29 = $(LIBS_29) libopenssl.lib
LIBPATHS_29 = $(LIBPATHS_29) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_29 = $(LIBS_29) libeay32.lib
LIBPATHS_29 = $(LIBPATHS_29) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_29 = $(LIBS_29) libssleay32.lib
LIBPATHS_29 = $(LIBPATHS_29) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF

build\$(CONFIG)\bin\libgo.dll: $(DEPS_29)
	@echo ..... [Link] build\$(CONFIG)\bin\libgo.dll
	"$(LD)" -dll -out:$(BUILD)\bin\libgo.dll -entry:$(ENTRY) $(LDFLAGS) $(LIBPATHS)  "$(BUILD)\obj\action.obj" "$(BUILD)\obj\alloc.obj" "$(BUILD)\obj\auth.obj" "$(BUILD)\obj\cgi.obj" "$(BUILD)\obj\crypt.obj" "$(BUILD)\obj\file.obj" "$(BUILD)\obj\fs.obj" "$(BUILD)\obj\http.obj" "$(BUILD)\obj\js.obj" "$(BUILD)\obj\jst.obj" "$(BUILD)\obj\options.obj" "$(BUILD)\obj\osdep.obj" "$(BUILD)\obj\rom-documents.obj" "$(BUILD)\obj\route.obj" "$(BUILD)\obj\runtime.obj" "$(BUILD)\obj\socket.obj" "$(BUILD)\obj\upload.obj" $(LIBPATHS_29) $(LIBS_29) $(LIBS_29) $(LIBS)  $(LOG)

#
#   goahead.obj
#
DEPS_30 = $(DEPS_30) build\$(CONFIG)\inc\goahead.h

build\$(CONFIG)\obj\goahead.obj: \
    src\goahead.c $(DEPS_30)
	@echo .. [Compile] build\$(CONFIG)\obj\goahead.obj
	"$(CC)" -c -Fo$(BUILD)\obj\goahead.obj -Fd$(BUILD)\obj\goahead.pdb $(CFLAGS) $(DFLAGS) -DME_COM_OPENSSL_PATH="$(ME_COM_OPENSSL_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\include" src\goahead.c $(LOG)

#
#   goahead
#
DEPS_31 = $(DEPS_31) build\$(CONFIG)\bin\libgo.dll
DEPS_31 = $(DEPS_31) build\$(CONFIG)\inc\goahead.h
DEPS_31 = $(DEPS_31) build\$(CONFIG)\inc\js.h
DEPS_31 = $(DEPS_31) build\$(CONFIG)\obj\goahead.obj

LIBS_31 = $(LIBS_31) libgo.lib
!IF "$(ME_COM_EST)" == "1"
LIBS_31 = $(LIBS_31) libestssl.lib
!ENDIF
!IF "$(ME_COM_EST)" == "1"
LIBS_31 = $(LIBS_31) libest.lib
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_31 = $(LIBS_31) libopenssl.lib
LIBPATHS_31 = $(LIBPATHS_31) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_31 = $(LIBS_31) libeay32.lib
LIBPATHS_31 = $(LIBPATHS_31) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_31 = $(LIBS_31) libssleay32.lib
LIBPATHS_31 = $(LIBPATHS_31) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF

build\$(CONFIG)\bin\goahead.exe: $(DEPS_31)
	@echo ..... [Link] build\$(CONFIG)\bin\goahead.exe
	"$(LD)" -nologo -out:$(BUILD)\bin\goahead.exe -entry:mainCRTStartup -subsystem:console $(LDFLAGS) $(LIBPATHS)  "$(BUILD)\obj\goahead.obj" $(LIBPATHS_31) $(LIBS_31) $(LIBS_31) $(LIBS)  $(LOG)

#
#   test.obj
#
DEPS_32 = $(DEPS_32) build\$(CONFIG)\inc\goahead.h
DEPS_32 = $(DEPS_32) build\$(CONFIG)\inc\js.h

build\$(CONFIG)\obj\test.obj: \
    test\test.c $(DEPS_32)
	@echo .. [Compile] build\$(CONFIG)\obj\test.obj
	"$(CC)" -c -Fo$(BUILD)\obj\test.obj -Fd$(BUILD)\obj\test.pdb $(CFLAGS) $(DFLAGS) -DME_COM_OPENSSL_PATH="$(ME_COM_OPENSSL_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\include" test\test.c $(LOG)

#
#   goahead-test
#
DEPS_33 = $(DEPS_33) build\$(CONFIG)\bin\libgo.dll
DEPS_33 = $(DEPS_33) build\$(CONFIG)\inc\goahead.h
DEPS_33 = $(DEPS_33) build\$(CONFIG)\inc\js.h
DEPS_33 = $(DEPS_33) build\$(CONFIG)\obj\test.obj

LIBS_33 = $(LIBS_33) libgo.lib
!IF "$(ME_COM_EST)" == "1"
LIBS_33 = $(LIBS_33) libestssl.lib
!ENDIF
!IF "$(ME_COM_EST)" == "1"
LIBS_33 = $(LIBS_33) libest.lib
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_33 = $(LIBS_33) libopenssl.lib
LIBPATHS_33 = $(LIBPATHS_33) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_33 = $(LIBS_33) libeay32.lib
LIBPATHS_33 = $(LIBPATHS_33) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_33 = $(LIBS_33) libssleay32.lib
LIBPATHS_33 = $(LIBPATHS_33) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF

build\$(CONFIG)\bin\goahead-test.exe: $(DEPS_33)
	@echo ..... [Link] build\$(CONFIG)\bin\goahead-test.exe
	"$(LD)" -nologo -out:$(BUILD)\bin\goahead-test.exe -entry:mainCRTStartup -subsystem:console $(LDFLAGS) $(LIBPATHS)  "$(BUILD)\obj\test.obj" $(LIBPATHS_33) $(LIBS_33) $(LIBS_33) $(LIBS)  $(LOG)

#
#   gopass.obj
#
DEPS_34 = $(DEPS_34) build\$(CONFIG)\inc\goahead.h

build\$(CONFIG)\obj\gopass.obj: \
    src\utils\gopass.c $(DEPS_34)
	@echo .. [Compile] build\$(CONFIG)\obj\gopass.obj
	"$(CC)" -c -Fo$(BUILD)\obj\gopass.obj -Fd$(BUILD)\obj\gopass.pdb $(CFLAGS) $(DFLAGS) -DME_COM_OPENSSL_PATH="$(ME_COM_OPENSSL_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\include" src\utils\gopass.c $(LOG)

#
#   gopass
#
DEPS_35 = $(DEPS_35) build\$(CONFIG)\bin\libgo.dll
DEPS_35 = $(DEPS_35) build\$(CONFIG)\inc\goahead.h
DEPS_35 = $(DEPS_35) build\$(CONFIG)\inc\js.h
DEPS_35 = $(DEPS_35) build\$(CONFIG)\obj\gopass.obj

LIBS_35 = $(LIBS_35) libgo.lib
!IF "$(ME_COM_EST)" == "1"
LIBS_35 = $(LIBS_35) libestssl.lib
!ENDIF
!IF "$(ME_COM_EST)" == "1"
LIBS_35 = $(LIBS_35) libest.lib
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_35 = $(LIBS_35) libopenssl.lib
LIBPATHS_35 = $(LIBPATHS_35) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_35 = $(LIBS_35) libeay32.lib
LIBPATHS_35 = $(LIBPATHS_35) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_35 = $(LIBS_35) libssleay32.lib
LIBPATHS_35 = $(LIBPATHS_35) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF

build\$(CONFIG)\bin\gopass.exe: $(DEPS_35)
	@echo ..... [Link] build\$(CONFIG)\bin\gopass.exe
	"$(LD)" -nologo -out:$(BUILD)\bin\gopass.exe -entry:mainCRTStartup -subsystem:console $(LDFLAGS) $(LIBPATHS)  "$(BUILD)\obj\gopass.obj" $(LIBPATHS_35) $(LIBS_35) $(LIBS_35) $(LIBS)  $(LOG)

#
#   roots.crt
#
DEPS_36 = $(DEPS_36) src\certs\roots.crt

build\$(CONFIG)\bin\roots.crt: $(DEPS_36)
	@echo ..... [Copy] build\$(CONFIG)\bin\roots.crt
	if not exist "build\$(CONFIG)\bin" md "build\$(CONFIG)\bin"
	copy /Y /B src\certs\roots.crt+modified build\$(CONFIG)\bin\roots.crt $(LOG)

